GEBRUIKT!!!

useful and correct inheritance (explain why)
- een basis class en een afgeleide class
- https://www.geeksforgeeks.org/inheritance-in-c/
UITLEG: waar? en waarom?
- dit wordt gebruikt bij de klasse boot.h

useful and correct object composition (explain why)
- https://www.geeksforgeeks.org/introduction-to-complex-objects-and-composition/
GEBRUIK: 
- dit wordt gebruikt bij de klasse boot.h



useful and correct multiple inheritance (explain why)
- https://www.geeksforgeeks.org/inheritance-in-c/
GEBRUIK: 
- dit wordt gebruikt bij de klasse boot.h en bij onderliggende klassen

correct base class (van inheritance)
GEBRUIK:
- dit wordt gebruikt bij de klasse boot.h

member initialization in constructors (the stuff behind a colon)
- wordt gebruikt in boot.h = constructor met ':'

separate header files

useful and correct encapsulation (explain why)
GEBRUIK:
- in boot.h, de variabellen staan in protected maar ze kunnen nog opgevraagd worden door de get...

at least 2 default constructors
- () is default, staat niet useful dus maak gewoon aan!!!
- dit wordt gebruikt bij de klasse patrouilleschip.h en slagschip.h

at least 2 specific constructors
- moet iets tussen de () staan, staat niet useful dus maak gewoon aan!!!
- dit wordt gebruikt bij de klasse patrouilleschip.h en slagschip.h

at least 2 destructors
- wordt gebruikt in boot.h

useful usage of "this" (if the code does not work without it)
- wordt gebruikt in boot.cpp


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
correct abstract base class
- https://www.geeksforgeeks.org/pure-virtual-functions-and-abstract-classes/
GEBRUIK: 
- dit wordt gebruikt bij de klasse boot.h
// opnieuw bekijken!!!!

useful virtual function
- gebruik de functie ook, niet alleen maken...
- https://www.geeksforgeeks.org/virtual-function-cpp/
GEBRUIK:
- wordt gebruikt in boot.h (virtual int getBreedte()) 
// opnieuw bekijken!!!!

clean main (i.e. nothing in the main that should be in a class)

useful class (explain why)

useful proven (dynamic) polymorphism
- https://www.geeksforgeeks.org/polymorphism-in-c/



useful member function

default values in function definition

useful member variabel

useful getters and setters for member variables

correct protections

no mistake in object-oriented programming

no globals, but statics if needed

everything in one or more self-made namespace(s)

maintainability by clean uniform code style and good function naming and/or comments everywhere
- goede naamgeving is beter als commentaar



2 useful unsigned chars or other better usage of memory efficient type
- een type card bestaat niet => unsigned char

using the best suited type on a lot of places (almost everywhere possible)

at least 4 useful const references

correctly using const in almost all places (almost everywhere possible)

at least 4 useful bool

useful pointer declaration and usage

dynamic memory allocation (new)

dynamic memory removing (delete)

2 useful (modern) call-by-references
- als argument ( &a , &b)

useful string class usage
- std string

useful container class
- std list

useful Qt class

useful operator overloading

useful function overloading (non operator)

useful function overriding (non virtual)

useful template function or class

useful non-type template arguments

useful friend function or class
- friend kunnen aan private delen van friend...

correct usage of inline function

useful recursive function

useful usage of nullptr

useful usage of (modern) file-I/O
- std stream

correct and useful usage of command line parameters

useful usage of signals/slots

useful usage of lambda function

one complete project that compiles and does not crash

working build manual as readme on GitHub (project must be possible to build from scratch on a clean PC)

test-driven development (= written test plan or unit tests)

solved on 8 bug tickets

reported 8 bug tickets on other projects

usage of a GUI

usage of OpenGL or other 3D engine

useful usage of an external library (not Qt)
- lib file

project that works with hardware

a nice extra that you think that should deserve grading (stuff you put time in and is not rewarded by an item above)



extra: 
- een blad met uitleg over de functie, is handig als gij tijdens de 10min uitleg vraagt
- 1-10 is basis!!!
- waar niet useful staat moet ge gewoon aanmaken...
